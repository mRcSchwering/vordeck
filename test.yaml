AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  MyApp API

Parameters:
  awsHostedZoneId:
    Type: String
    Default: <myid>
  MyAppApiAddress:
    Type: String
    Default: api
    AllowedPattern: "^[a-z0-9][a-z0-9\\-]+$"
  ApiStageName:
    Type: String
    Default: dev
    AllowedPattern: "^[a-z0-9]+$"
  codebuildProjectName:
    Type: String
    Default: "MyApp-entity-builder"
  MyAppExternalDomain:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /MyApp-dev/external_domain
  MyAppEnvironment:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/account/environment"
  MyAppCodebuildProjectArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/codebuild/MyApp-entity-builder-arn"
  MyAppDynamodbentitiesArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/dynamodb/entities-table-arn"
  MyAppDynamodbClientsArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/dynamodb/clients-table-arn"
  MyAppRestrictedBucketArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/s3/restricted-bucket-arn"
  MyAppRestrictedBucketKmsKeyArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/kms/restricted-bucket-kms-key-arn"
  MyAppRestrictedBucketAzureAdGroup:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/s3/restricted-bucket-azure-ad-group"
  ALBCertificateARN:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/alb/certificate_arn"
  cognitoUserPoolEndpoint:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/iam-automation/cognito/endpoint"
  cognitoUserPoolIDArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/iam-automation/cognito/user-pool-arn"
  cognitoClientId:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/MyApp-portal/client-id"
  cognitoUserPoolId:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/iam-automation/cognito/user-pool-id"
  cognitoIdentityPoolId:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/iam-automation/cognito/identity-pool-id"
  cognitoProviderName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/iam-automation/cognito/provider-name"
  cognitoAppClientPrefix:
    Type: String
    Default: "MyApp-projects-"
  MyAppEmailSender:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/ses/sender-identity"
  sqsSyncIamGroupsQueueId:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/iam-automation/groups_sync_sqs_queue_id"
  sqsSyncIamGroupsQueueArn:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/MyApp-dev/iam-automation/groups_sync_sqs_queue_arn"

Globals:
  Function:
    Timeout: 10
    MemorySize: 512
    Environment:
      Variables:
        AWS_account: !Ref AWS::AccountId
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:<myid>:layer:LambdaInsightsExtension:2"

Resources:
  entitiesGetApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/entities/"
            Method: get
            RestApiId: !Ref Api
      Environment:
        Variables:
          AWS_region: !Ref AWS::Region
          MyApp_entities_TABLE:
            !Select [1, !Split ["/", !Ref MyAppDynamodbentitiesArn]]
          stage: !Ref MyAppEnvironment
          restrictedBucketName:
            !Select [5, !Split [":", !Ref MyAppRestrictedBucketArn]]
          restrictedBucketAdGroup: !Ref MyAppRestrictedBucketAzureAdGroup
          codebuild_project_name: !Ref codebuildProjectName
          MyAppDynamodbentities:
            !Select [1, !Split ["/", !Ref MyAppDynamodbentitiesArn]]
      Handler: entities_get.lambda_handler
      CodeUri: api/
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
              Resource:
                - !Ref MyAppDynamodbentitiesArn
                - !Join [
                    "/",
                    [
                      !Select [0, !Split ["/", !Ref MyAppDynamodbentitiesArn]],
                      "ci-*",
                    ],
                  ]
        - Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                Fn::Sub:
                  - "arn:aws:ssm:${region}:${aws_account}:parameter/${environment}/cli_version"
                  - aws_account: !Ref AWS::AccountId
                    region: !Ref AWS::Region
                    environment: !Ref MyAppEnvironment

  entitiesPostApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/entities/"
            Method: post
            RestApiId: !Ref Api
      Environment:
        Variables:
          AWS_region: !Ref AWS::Region
          MyApp_entities_TABLE:
            !Select [1, !Split ["/", !Ref MyAppDynamodbentitiesArn]]
          sqsSyncIamGroupsQueueId: !Ref sqsSyncIamGroupsQueueId
          stage: !Ref MyAppEnvironment
          restrictedBucketName:
            !Select [5, !Split [":", !Ref MyAppRestrictedBucketArn]]
          restrictedBucketAdGroup: !Ref MyAppRestrictedBucketAzureAdGroup
          codebuild_project_name: !Ref codebuildProjectName
          MyAppDynamodbentities:
            !Select [1, !Split ["/", !Ref MyAppDynamodbentitiesArn]]
          CREATE_GROUP_USER_FUNCTION: !Ref entitiesCreateGroupUser
      Handler: entities_post.lambda_handler
      Timeout: 30
      CodeUri: api/
      Layers:
        - !Ref LambdaAzureADLayer
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - "sqs:SendMessage"
              Resource: !Ref sqsSyncIamGroupsQueueArn
        - Statement:
            - Effect: Allow
              Action:
                - "codebuild:StartBuild"
                - "codebuild:BatchGetBuilds"
              Resource: !Ref MyAppCodebuildProjectArn
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
              Resource:
                - !Ref MyAppDynamodbentitiesArn
                - !Join [
                    "/",
                    [
                      !Select [0, !Split ["/", !Ref MyAppDynamodbentitiesArn]],
                      "ci-*",
                    ],
                  ]
        - Statement:
            - Effect: Allow
              Action:
                - "s3:DeleteObject"
                - "s3:Get*"
                - "s3:List*"
                - "s3:PutObject"
              Resource:
                - !Ref MyAppRestrictedBucketArn
                - !Join ["/", [!Ref MyAppRestrictedBucketArn, "*"]]
        - Statement:
            - Effect: Allow
              Action:
                - "kms:Decrypt"
                - "kms:DescribeKey"
                - "kms:Encrypt"
                - "kms:GenerateDataKey*"
                - "kms:ReEncrypt*"
              Resource:
                - !Ref MyAppRestrictedBucketKmsKeyArn
        - Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                Fn::Sub:
                  - "arn:aws:ssm:${region}:${aws_account}:parameter/params/azure*"
                  - aws_account: !Ref AWS::AccountId
                    region: !Ref AWS::Region
        - Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                Fn::Sub:
                  - "arn:aws:ssm:${region}:${aws_account}:parameter/${environment}/cli_version"
                  - aws_account: !Ref AWS::AccountId
                    region: !Ref AWS::Region
                    environment: !Ref MyAppEnvironment
        - Statement:
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - !GetAtt entitiesCreateGroupUser.Arn

  SomeProjectsPostApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/some-projects"
            Method: post
            RestApiId: !Ref Api
      Environment:
        Variables:
          cognitoUserPoolId: !Ref cognitoUserPoolId
          cognitoIdentityPoolId: !Ref cognitoIdentityPoolId
          cognitoProviderName: !Ref cognitoProviderName
          cognitoAppClientPrefix: !Ref cognitoAppClientPrefix
          cognitoEndpoint:
            !Select [0, !Split ["/", !Ref cognitoUserPoolEndpoint]]
          AWS_region: !Ref AWS::Region
          stage: !Ref MyAppEnvironment
          MyAppDynamodbClients:
            !Select [1, !Split ["/", !Ref MyAppDynamodbClientsArn]]
      Handler: some_projects_post.lambda_handler
      CodeUri: api/
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:BatchGetItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
              Resource:
                - !Ref MyAppDynamodbClientsArn
                - !Join [
                    "/",
                    [
                      !Select [0, !Split ["/", !Ref MyAppDynamodbClientsArn]],
                      "ci-*",
                    ],
                  ]
            - Effect: Allow
              Action:
                - "cognito-idp:CreateUserPoolClient"
                - "cognito-idp:DescribeUserPoolClient"
                - "cognito-idp:UpdateUserPoolClient"
                - "cognito-idp:ListUserPoolClients"
                - "cognito-idp:DescribeUserPool"
              Resource:
                Fn::Sub:
                  - "arn:aws:cognito-idp:${region}:${aws_account}:userpool/${user_pool_id}"
                  - aws_account: !Ref AWS::AccountId
                    user_pool_id: !Ref cognitoUserPoolId
                    region: !Ref AWS::Region
            - Effect: Allow
              Action:
                - "iam:PassRole"
              Resource:
                Fn::Sub:
                  - "arn:aws:iam::${aws_account}:role/tf_cognito_role_auth*"
                  - aws_account: !Ref AWS::AccountId
            - Effect: Allow
              Action:
                - "iam:PassRole"
              Resource:
                Fn::Sub:
                  - "arn:aws:iam::${aws_account}:role/tf_cognito_role_unauth*"
                  - aws_account: !Ref AWS::AccountId
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                Fn::Sub:
                  - "arn:aws:ssm:${region}:${aws_account}:parameter/${environment}/cli_version"
                  - aws_account: !Ref AWS::AccountId
                    region: !Ref AWS::Region
                    environment: !Ref MyAppEnvironment

  SomeProjectsDeleteApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/some-projects"
            Method: delete
            RestApiId: !Ref Api
      Environment:
        Variables:
          cognitoUserPoolId: !Ref cognitoUserPoolId
          cognitoIdentityPoolId: !Ref cognitoIdentityPoolId
          cognitoEndpoint:
            !Select [0, !Split ["/", !Ref cognitoUserPoolEndpoint]]
          cognitoAppClientPrefix: !Ref cognitoAppClientPrefix
          AWS_region: !Ref AWS::Region
          stage: !Ref MyAppEnvironment
          MyAppDynamodbClients:
            !Select [1, !Split ["/", !Ref MyAppDynamodbClientsArn]]
      Handler: some_projects_delete.lambda_handler
      CodeUri: api/
      Layers:
        - !Ref LambdaAzureADLayer
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
                - "dynamodb:DeleteItem"
              Resource:
                - !Ref MyAppDynamodbClientsArn
                - !Join [
                    "/",
                    [
                      !Select [0, !Split ["/", !Ref MyAppDynamodbClientsArn]],
                      "ci-*",
                    ],
                  ]
            - Effect: Allow
              Action:
                - "cognito-idp:DescribeUserPoolClient"
                - "cognito-idp:UpdateUserPoolClient"
                - "cognito-idp:ListUserPoolClients"
                - "cognito-idp:DescribeUserPool"
              Resource:
                Fn::Sub:
                  - "arn:aws:cognito-idp:${region}:${aws_account}:userpool/${user_pool_id}"
                  - aws_account: !Ref AWS::AccountId
                    user_pool_id: !Ref cognitoUserPoolId
                    region: !Ref AWS::Region
            - Effect: Allow
              Action:
                - "iam:PassRole"
              Resource:
                Fn::Sub:
                  - "arn:aws:iam::${aws_account}:role/tf_cognito_role_auth*"
                  - aws_account: !Ref AWS::AccountId
            - Effect: Allow
              Action:
                - "iam:PassRole"
              Resource:
                Fn::Sub:
                  - "arn:aws:iam::${aws_account}:role/tf_cognito_role_unauth*"
                  - aws_account: !Ref AWS::AccountId
        - Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                Fn::Sub:
                  - "arn:aws:ssm:${region}:${aws_account}:parameter/${environment}/cli_version"
                  - aws_account: !Ref AWS::AccountId
                    region: !Ref AWS::Region
                    environment: !Ref MyAppEnvironment

  SomeProjectsGetApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/some-projects"
            Method: get
            RestApiId: !Ref Api
      Environment:
        Variables:
          cognitoUserPoolId: !Ref cognitoUserPoolId
          cognitoIdentityPoolId: !Ref cognitoIdentityPoolId
          cognitoEndpoint:
            !Select [0, !Split ["/", !Ref cognitoUserPoolEndpoint]]
          AWS_region: !Ref AWS::Region
          stage: !Ref MyAppEnvironment
          MyAppDynamodbClients:
            !Select [1, !Split ["/", !Ref MyAppDynamodbClientsArn]]
      Handler: some_projects_get.lambda_handler
      CodeUri: api/
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
              Resource:
                - !Ref MyAppDynamodbClientsArn
                - !Join [
                    "/",
                    [
                      !Select [0, !Split ["/", !Ref MyAppDynamodbClientsArn]],
                      "ci-*",
                    ],
                  ]
        - Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                Fn::Sub:
                  - "arn:aws:ssm:${region}:${aws_account}:parameter/${environment}/cli_version"
                  - aws_account: !Ref AWS::AccountId
                    region: !Ref AWS::Region
                    environment: !Ref MyAppEnvironment

  SomeProjectsCommandPostApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/some-projects/command"
            Method: get
            RestApiId: !Ref Api
      Environment:
        Variables:
          AWS_region: !Ref AWS::Region
          stage: !Ref MyAppEnvironment
          MyAppDynamodbClients:
            !Select [1, !Split ["/", !Ref MyAppDynamodbClientsArn]]
          cognitoUserPoolId: !Ref cognitoUserPoolId
          cognitoIdentityPoolId: !Ref cognitoIdentityPoolId
          cognitoProviderName: !Ref cognitoProviderName
          cognitoAppClientPrefix: !Ref cognitoAppClientPrefix
          cognitoEndpoint:
            !Select [0, !Split ["/", !Ref cognitoUserPoolEndpoint]]
      Handler: some_projects_command_get.lambda_handler
      CodeUri: api/
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
              Resource:
                - !Ref MyAppDynamodbClientsArn
                - !Join [
                    "/",
                    [
                      !Select [0, !Split ["/", !Ref MyAppDynamodbClientsArn]],
                      "ci-*",
                    ],
                  ]
            - Effect: Allow
              Action:
                - "cognito-idp:DescribeUserPoolClient"
                - "cognito-idp:ListUserPoolClients"
              Resource:
                Fn::Sub:
                  - "arn:aws:cognito-idp:${region}:${aws_account}:userpool/${user_pool_id}"
                  - aws_account: !Ref AWS::AccountId
                    user_pool_id: !Ref cognitoUserPoolId
                    region: !Ref AWS::Region
        - Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                Fn::Sub:
                  - "arn:aws:ssm:${region}:${aws_account}:parameter/${environment}/cli_version"
                  - aws_account: !Ref AWS::AccountId
                    region: !Ref AWS::Region
                    environment: !Ref MyAppEnvironment

  CheckentityExpiration:
    Type: AWS::Serverless::Function
    Properties:
      Handler: entities_expiration_check.lambda_handler
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(7 days)
      Environment:
        Variables:
          AWS_region: !Ref AWS::Region
          MyApp_entities_TABLE:
            !Select [1, !Split ["/", !Ref MyAppDynamodbentitiesArn]]
          MyApp_EMAIL_SENDER: !Ref MyAppEmailSender
      CodeUri: api/
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
              Resource:
                - !Ref MyAppDynamodbentitiesArn
                - !Join [
                    "/",
                    [
                      !Select [0, !Split ["/", !Ref MyAppDynamodbentitiesArn]],
                      "ci-*",
                    ],
                  ]
        - Statement:
            - Effect: Allow
              Action:
                - "ses:SendEmail"
                - "ses:SendRawEmail"
              Resource: "*"

  entitiesCreateGroupUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: entities_create_group_user.lambda_handler
      Environment:
        Variables:
          AWS_region: !Ref AWS::Region
          MyApp_entities_TABLE:
            !Select [1, !Split ["/", !Ref MyAppDynamodbentitiesArn]]
          sqsSyncIamGroupsQueueId: !Ref sqsSyncIamGroupsQueueId
          stage: !Ref MyAppEnvironment
          codebuild_project_name: !Ref codebuildProjectName
          MyAppDynamodbentities:
            !Select [1, !Split ["/", !Ref MyAppDynamodbentitiesArn]]
          MyApp_EMAIL_SENDER: !Ref MyAppEmailSender
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      CodeUri: api/
      Timeout: 420
      Layers:
        - !Ref LambdaAzureADLayer
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "sqs:SendMessage"
              Resource: !Ref sqsSyncIamGroupsQueueArn
        - Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - "codebuild:StartBuild"
                - "codebuild:BatchGetBuilds"
              Resource: !Ref MyAppCodebuildProjectArn
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:Query"
              Resource:
                - !Ref MyAppDynamodbentitiesArn
                - !Join [
                    "/",
                    [
                      !Select [0, !Split ["/", !Ref MyAppDynamodbentitiesArn]],
                      "ci-*",
                    ],
                  ]
        - Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource:
                Fn::Sub:
                  - "arn:aws:ssm:${region}:${aws_account}:parameter/params/azure*"
                  - aws_account: !Ref AWS::AccountId
                    region: !Ref AWS::Region
        - Statement:
            - Effect: Allow
              Action:
                - "ses:SendEmail"
                - "ses:SendRawEmail"
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - Fn::Sub:
                    - "arn:aws:lambda:${region}:${aws_account}:function:oauth-${environment}-lambda-groups-sync-cron"
                    - aws_account: !Ref AWS::AccountId
                      region: !Ref AWS::Region
                      environment: !Ref MyAppEnvironment
        - Statement:
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - Fn::Sub:
                    - "arn:aws:lambda:${region}:${aws_account}:function:oauth-${environment}-lambda-groups-sync-sqs"
                    - aws_account: !Ref AWS::AccountId
                      region: !Ref AWS::Region
                      environment: !Ref MyAppEnvironment

  CreateTestDataApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/test_data"
            Method: get
            RestApiId: !Ref Api
      Environment:
        Variables:
          AWS_region: !Ref AWS::Region
          MyAppDynamodbentities:
            !Select [1, !Split ["/", !Ref MyAppDynamodbentitiesArn]]
          MyAppDynamodbClients:
            !Select [1, !Split ["/", !Ref MyAppDynamodbClientsArn]]
      Handler: test_data.lambda_handler
      CodeUri: api/
      Runtime: python3.8
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Scan"
                - "dynamodb:Query"
                - "dynamodb:BatchWriteItem"
                - "dynamodb:PutItem"
                - "dynamodb:CreateTable"
                - "dynamodb:DeleteTable"
                - "dynamodb:DescribeTable"
              Resource:
                !Join [
                  "/",
                  [
                    !Select [0, !Split ["/", !Ref MyAppDynamodbentitiesArn]],
                    "ci-*",
                  ],
                ]
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Scan"
                - "dynamodb:Query"
                - "dynamodb:BatchWriteItem"
                - "dynamodb:PutItem"
                - "dynamodb:CreateTable"
                - "dynamodb:DeleteTable"
                - "dynamodb:DescribeTable"
              Resource:
                !Join [
                  "/",
                  [
                    !Select [0, !Split ["/", !Ref MyAppDynamodbClientsArn]],
                    "ci-*",
                  ],
                ]

  TriggerIamGroupSyncSqs:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
